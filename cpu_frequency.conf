# Telegraf config to create metrics for cpu frequency.
# Created for Telegraf 1.20.3
# Get the output of lscpu for each core's frequency in json format and turn it into metrics
[[inputs.exec]]
  commands = ["/usr/bin/lscpu -J --extended=CPU,MHZ"]
  timeout = "5s"
  name_suffix = "_cpufreq"
  data_format = "json"
  json_query = "cpus"
	# I have not been able to get this to work without this field being a string.
  json_string_fields=["mhz"]
  tag_keys = ["cpu"]

# Rename mhz to frequency since we're going to convert it to hz.
[[processors.rename]]
  [[processors.rename.replace]]
    field = 'mhz'
    dest = 'frequency'

# Convert lscpu output from mhz to hz and tag each metric with the appropriate ccx
[[processors.starlark]]
  source = '''
load('math.star', 'math')
def apply(metric):
  # Lists of cpu ids by core complex for Ryzen 5950X
  CCX0 = ('0', '1', '2', '3', '4', '5', '6', '7', '16', '17', '18', '19', '20', '21', '22', '23')
  CCX1 = ('8', '9', '10', '11', '12', '13', '14', '15', '24', '25', '26', '27', '28', '29', '30', '31')
  
  for k, v in metric.fields.items():
    # transform frequency field from mhz to hz.
    if 'frequency' in metric.fields:
      metric.fields[k] = math.round(float(v) * float(1000000))

    # Find cpu tags and add the appropriate ccx tag
    if 'cpu' in metric.tags:
      core = metric.tags['cpu']
      # some metrics have cpuXX for identifier, some are just XX
      if core in CCX0 or core[3:] in CCX0:
        metric.tags['chiplet'] = 'ccx0'
      elif core in CCX1 or core[3:] in CCX1:
        metric.tags['chiplet'] = 'ccx1'
  return metric
''' 
